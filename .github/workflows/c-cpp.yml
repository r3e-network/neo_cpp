name: Comprehensive C++ CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc-11]
        build_type: [Release, Debug]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          build-essential \
          libssl-dev \
          pkg-config \
          libgtest-dev \
          libgmock-dev \
          nlohmann-json3-dev \
          libspdlog-dev \
          libboost-all-dev \
          lcov \
          cppcheck \
          clang-tidy
    
    - name: Setup compiler
      run: |
        sudo apt-get install -y gcc-11 g++-11
        echo "CC=gcc-11" >> $GITHUB_ENV
        echo "CXX=g++-11" >> $GITHUB_ENV
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DNEO_BUILD_TESTS=ON \
          -DNEO_BUILD_TOOLS=ON \
          -DNEO_BUILD_APPS=ON \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -G Ninja
    
    - name: Build All Targets
      run: |
        cmake --build build --parallel $(nproc)
    
    - name: Run Static Analysis
      if: matrix.build_type == 'Release'
      run: |
        find src -name "*.cpp" -o -name "*.h" | head -10 | xargs cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem
    
    - name: Run All Unit Tests
      working-directory: build
      run: |
        # Run CTest to execute all registered tests
        ctest --output-on-failure --timeout 300 --parallel $(nproc)
    
    - name: Run Individual Test Executables
      working-directory: build
      run: |
        # Find and run any test executables that might not be registered with CTest
        find . -name "*test*" -type f -executable -not -path "./CMakeFiles/*" | while read test_exec; do
          echo "Running: $test_exec"
          timeout 60 "$test_exec" || echo "Test $test_exec failed or timed out"
        done
    
    - name: Generate Coverage Report
      if: matrix.build_type == 'Debug'
      run: |
        lcov --capture --directory build --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --remove coverage.info '*/third_party/*' --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' --output-file coverage.info
        lcov --list coverage.info
    
    - name: Upload Coverage to Codecov
      if: matrix.build_type == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        fail_ci_if_error: false
