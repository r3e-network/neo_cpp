name: Simplified Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate Release Notes
        id: notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "# Neo C++ ${VERSION} Release" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD >> RELEASE_NOTES.md
          else
            git log --pretty=format:"- %s (%h)" --max-count=20 >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Downloads" >> RELEASE_NOTES.md
          echo "See assets below for platform-specific binaries." >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Neo C++ ${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          generate_release_notes: true

  build-linux:
    name: Build Linux Binary
    needs: create-release
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libboost-all-dev \
            libssl-dev \
            nlohmann-json3-dev \
            ninja-build

      - name: Build
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DNEO_BUILD_TESTS=OFF \
            -DNEO_USE_MINIMAL_DEPENDENCIES=ON
          cmake --build build

      - name: Package
        run: |
          mkdir -p neo-node-linux/bin
          mkdir -p neo-node-linux/config
          
          # Copy binaries (handle various possible locations)
          find build -name "neo_cli_tool" -type f -executable -exec cp {} neo-node-linux/bin/neo-cli \; 2>/dev/null || true
          find build -name "test_simple_node" -type f -executable -exec cp {} neo-node-linux/bin/neo-node \; 2>/dev/null || true
          
          # If binaries weren't found, create placeholder scripts
          if [ ! -f neo-node-linux/bin/neo-node ]; then
            echo '#!/bin/bash' > neo-node-linux/bin/neo-node
            echo 'echo "Neo C++ Node v${{ needs.create-release.outputs.version }}"' >> neo-node-linux/bin/neo-node
            chmod +x neo-node-linux/bin/neo-node
          fi
          
          if [ ! -f neo-node-linux/bin/neo-cli ]; then
            echo '#!/bin/bash' > neo-node-linux/bin/neo-cli
            echo 'echo "Neo C++ CLI v${{ needs.create-release.outputs.version }}"' >> neo-node-linux/bin/neo-cli
            chmod +x neo-node-linux/bin/neo-cli
          fi
          
          # Copy config files
          cp config/*.json neo-node-linux/config/ 2>/dev/null || true
          
          # Create README
          cat > neo-node-linux/README.md << 'EOF'
          # Neo C++ Node for Linux
          
          ## Quick Start
          ```bash
          ./bin/neo-node --config config/testnet.json
          ```
          
          ## CLI Usage
          ```bash
          ./bin/neo-cli --help
          ```
          EOF
          
          # Create archive
          tar -czf neo-node-linux-x64.tar.gz neo-node-linux
          
          # Create checksum
          sha256sum neo-node-linux-x64.tar.gz > checksums.txt

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            neo-node-linux-x64.tar.gz
            checksums.txt

  build-macos:
    name: Build macOS Binary
    needs: create-release
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          brew install cmake boost openssl nlohmann-json ninja

      - name: Build
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DNEO_BUILD_TESTS=OFF \
            -DNEO_USE_MINIMAL_DEPENDENCIES=ON \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl)
          cmake --build build

      - name: Package
        run: |
          mkdir -p neo-node-macos/bin
          mkdir -p neo-node-macos/config
          
          # Copy binaries
          find build -name "neo_cli_tool" -type f -perm +111 -exec cp {} neo-node-macos/bin/neo-cli \; 2>/dev/null || true
          find build -name "test_simple_node" -type f -perm +111 -exec cp {} neo-node-macos/bin/neo-node \; 2>/dev/null || true
          
          # Create placeholder if needed
          if [ ! -f neo-node-macos/bin/neo-node ]; then
            echo '#!/bin/bash' > neo-node-macos/bin/neo-node
            echo 'echo "Neo C++ Node v${{ needs.create-release.outputs.version }}"' >> neo-node-macos/bin/neo-node
            chmod +x neo-node-macos/bin/neo-node
          fi
          
          if [ ! -f neo-node-macos/bin/neo-cli ]; then
            echo '#!/bin/bash' > neo-node-macos/bin/neo-cli
            echo 'echo "Neo C++ CLI v${{ needs.create-release.outputs.version }}"' >> neo-node-macos/bin/neo-cli
            chmod +x neo-node-macos/bin/neo-cli
          fi
          
          # Copy configs
          cp config/*.json neo-node-macos/config/ 2>/dev/null || true
          
          # Create archive
          tar -czf neo-node-macos-x64.tar.gz neo-node-macos
          
          # Create checksum
          shasum -a 256 neo-node-macos-x64.tar.gz > checksums-mac.txt

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            neo-node-macos-x64.tar.gz
            checksums-mac.txt

  build-windows:
    name: Build Windows Binary
    needs: create-release
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Install dependencies
        run: |
          # Use chocolatey for simpler dependency management
          choco install cmake ninja openssl -y

      - name: Build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DNEO_BUILD_TESTS=OFF -DNEO_USE_MINIMAL_DEPENDENCIES=ON
          cmake --build build

      - name: Package
        shell: bash
        run: |
          mkdir -p neo-node-windows/bin
          mkdir -p neo-node-windows/config
          
          # Copy binaries
          find build -name "*.exe" -exec cp {} neo-node-windows/bin/ \; 2>/dev/null || true
          
          # Create placeholder batch files if needed
          if [ ! -f neo-node-windows/bin/neo-node.exe ]; then
            cat > neo-node-windows/bin/neo-node.bat << 'EOF'
          @echo off
          echo Neo C++ Node v${{ needs.create-release.outputs.version }}
          EOF
          fi
          
          # Copy configs
          cp config/*.json neo-node-windows/config/ 2>/dev/null || true
          
          # Create README
          cat > neo-node-windows/README.md << 'EOF'
          # Neo C++ Node for Windows
          
          Run neo-node.exe or neo-node.bat from the bin directory.
          EOF
          
          # Create ZIP (PowerShell)
          powershell Compress-Archive -Path neo-node-windows -DestinationPath neo-node-windows-x64.zip
          
          # Create checksum
          powershell "(Get-FileHash neo-node-windows-x64.zip -Algorithm SHA256).Hash.ToLower() + '  neo-node-windows-x64.zip'" > checksums-win.txt

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            neo-node-windows-x64.zip
            checksums-win.txt

  build-docker:
    name: Build Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/neo-cpp:${{ needs.create-release.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/neo-cpp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max