name: Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

# Cancel previous runs
concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        build-type: [Debug, Release]
        exclude:
          # Exclude gcc on macOS
          - os: macos-latest
            compiler: gcc
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup build environment (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libssl-dev \
          libboost-all-dev \
          librocksdb-dev \
          libgtest-dev \
          lcov
    
    - name: Setup build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install cmake openssl boost rocksdb googletest lcov
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}
    
    - name: Build
      run: |
        cd build
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
    
    - name: Run unit tests
      if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == '' || github.event.inputs.test_type == 'all'
      run: |
        cd build
        ctest -E "test_integration" --output-on-failure --timeout 60
    
    - name: Run integration tests
      if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all'
      run: |
        cd build
        ctest -R "test_integration" --output-on-failure --timeout 300
    
    - name: Run quick tests
      if: github.event.inputs.test_type == 'quick'
      run: |
        cd build
        ctest -E "test_integration" --timeout 10 --output-on-failure
    
    - name: Generate test report
      if: always()
      run: |
        cd build
        ctest --output-on-failure --verbose > test_report.txt 2>&1 || true
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        tail -50 test_report.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build-type }}
        path: |
          build/test_report.txt
          build/Testing/Temporary/LastTest.log
    
    - name: Generate coverage report (Debug only)
      if: matrix.build-type == 'Debug' && runner.os == 'Linux'
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file coverage_filtered.info
        lcov --list coverage_filtered.info
    
    - name: Upload coverage to Codecov
      if: matrix.build-type == 'Debug' && runner.os == 'Linux'
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage_filtered.info
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.compiler }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libssl-dev libboost-all-dev librocksdb-dev libgtest-dev
    
    - name: Build Release
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
    
    - name: Run performance tests
      run: |
        cd build
        # Run tests and capture timing
        ctest --output-on-failure --verbose | tee performance.log
        
        # Extract timing information
        echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        grep -E "Test #[0-9]+:.*Passed.*[0-9]+\.[0-9]+ sec" performance.log >> $GITHUB_STEP_SUMMARY || true
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: build/performance.log

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate summary report
      run: |
        echo "# Neo C++ Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Process each test result
        for dir in test-results-*; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> $GITHUB_STEP_SUMMARY
            if [ -f "$dir/test_report.txt" ]; then
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              tail -20 "$dir/test_report.txt" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Test suite execution completed" >> $GITHUB_STEP_SUMMARY