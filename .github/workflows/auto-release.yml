name: Automatic Release

# Triggers when a release branch is created or pushed
on:
  push:
    branches:
      - 'release/v*'
  create:
    branches:
      - 'release/v*'

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from branch name
        id: extract_version
        run: |
          # Extract version from branch name (release/vX.Y.Z -> vX.Y.Z)
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          VERSION="${BRANCH_NAME#release/}"
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Error: Invalid version format. Expected vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"
          
          # Update VERSION file
          echo "${VERSION#v}" > VERSION
          
          # Create git tag
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${VERSION}" -m "Release ${VERSION}" || echo "Tag already exists"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          
          cat > RELEASE_NOTES.md << 'EOF'
          # Neo C++ ${{ steps.extract_version.outputs.version }}
          
          ## What's New
          This release was automatically generated from branch `${{ github.ref_name }}`.
          
          ## Changes
          EOF
          
          # Add recent commits
          git log --pretty=format:"- %s (%h)" -20 >> RELEASE_NOTES.md || true
          
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Download the appropriate binary for your platform from the assets below." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Quick Start" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# Linux/macOS" >> RELEASE_NOTES.md
          echo "tar -xzf neo-cpp-*.tar.gz" >> RELEASE_NOTES.md
          echo "cd neo-cpp-*" >> RELEASE_NOTES.md
          echo "./bin/neo-node --help" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "# Windows" >> RELEASE_NOTES.md
          echo "# Extract neo-cpp-*.zip and run neo-node.exe" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Neo C++ ${{ steps.extract_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}
          generate_release_notes: false

  build-linux:
    name: Build Linux Binary
    needs: prepare-release
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libssl-dev \
            libboost-all-dev

      - name: Build project
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DNEO_BUILD_TESTS=OFF \
            -DNEO_BUILD_EXAMPLES=OFF \
            -DNEO_BUILD_TOOLS=ON \
            -DNEO_BUILD_APPS=ON
          make -C build -j$(nproc) || make -C build -j1

      - name: Package binaries
        run: |
          # Create package directory
          mkdir -p neo-cpp-linux-x64/bin
          mkdir -p neo-cpp-linux-x64/config
          mkdir -p neo-cpp-linux-x64/lib
          
          # Find and copy executables
          find build -type f -executable \( -name "*neo*" -o -name "*cli*" -o -name "*node*" \) \
            -not -path "*/CMakeFiles/*" \
            -exec cp {} neo-cpp-linux-x64/bin/ \; 2>/dev/null || true
          
          # Copy configuration files
          cp -r config/* neo-cpp-linux-x64/config/ 2>/dev/null || true
          
          # Copy libraries if any
          find build -name "*.so*" -exec cp {} neo-cpp-linux-x64/lib/ \; 2>/dev/null || true
          
          # Create README
          cat > neo-cpp-linux-x64/README.md << 'EOF'
          # Neo C++ for Linux x64
          
          Version: ${{ needs.prepare-release.outputs.version }}
          Platform: Linux x64 (Ubuntu 20.04+)
          
          ## Quick Start
          ```bash
          ./bin/neo-node --config config/testnet.json
          ./bin/neo-cli --help
          ```
          
          ## Directory Structure
          - bin/ - Executable files
          - config/ - Configuration files
          - lib/ - Shared libraries
          EOF
          
          # Create startup script
          cat > neo-cpp-linux-x64/start.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/bin/neo-node" --config "$SCRIPT_DIR/config/testnet.json" "$@"
          EOF
          chmod +x neo-cpp-linux-x64/start.sh
          
          # Create archive
          tar -czf neo-cpp-linux-x64-${{ needs.prepare-release.outputs.version }}.tar.gz neo-cpp-linux-x64
          
          # Generate checksum
          sha256sum neo-cpp-linux-x64-${{ needs.prepare-release.outputs.version }}.tar.gz > neo-cpp-linux-x64-${{ needs.prepare-release.outputs.version }}.tar.gz.sha256

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          files: |
            neo-cpp-linux-x64-${{ needs.prepare-release.outputs.version }}.tar.gz
            neo-cpp-linux-x64-${{ needs.prepare-release.outputs.version }}.tar.gz.sha256

  build-macos:
    name: Build macOS Binary
    needs: prepare-release
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Setup build environment
        run: |
          brew install cmake boost openssl@3 || true

      - name: Build project
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DNEO_BUILD_TESTS=OFF \
            -DNEO_BUILD_EXAMPLES=OFF \
            -DNEO_BUILD_TOOLS=ON \
            -DNEO_BUILD_APPS=ON \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
          make -C build -j$(sysctl -n hw.ncpu) || make -C build -j1

      - name: Package binaries
        run: |
          # Create package directory
          mkdir -p neo-cpp-macos-x64/bin
          mkdir -p neo-cpp-macos-x64/config
          mkdir -p neo-cpp-macos-x64/lib
          
          # Find and copy executables
          find build -type f -perm +111 \( -name "*neo*" -o -name "*cli*" -o -name "*node*" \) \
            -not -path "*/CMakeFiles/*" \
            -exec cp {} neo-cpp-macos-x64/bin/ \; 2>/dev/null || true
          
          # Copy configuration files
          cp -r config/* neo-cpp-macos-x64/config/ 2>/dev/null || true
          
          # Copy libraries if any
          find build -name "*.dylib" -exec cp {} neo-cpp-macos-x64/lib/ \; 2>/dev/null || true
          
          # Create README
          cat > neo-cpp-macos-x64/README.md << 'EOF'
          # Neo C++ for macOS x64
          
          Version: ${{ needs.prepare-release.outputs.version }}
          Platform: macOS 12+ (Intel/Apple Silicon)
          
          ## Quick Start
          ```bash
          ./bin/neo-node --config config/testnet.json
          ./bin/neo-cli --help
          ```
          
          ## Directory Structure
          - bin/ - Executable files
          - config/ - Configuration files
          - lib/ - Dynamic libraries
          EOF
          
          # Create startup script
          cat > neo-cpp-macos-x64/start.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          export DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib:$DYLD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/bin/neo-node" --config "$SCRIPT_DIR/config/testnet.json" "$@"
          EOF
          chmod +x neo-cpp-macos-x64/start.sh
          
          # Create archive
          tar -czf neo-cpp-macos-x64-${{ needs.prepare-release.outputs.version }}.tar.gz neo-cpp-macos-x64
          
          # Generate checksum
          shasum -a 256 neo-cpp-macos-x64-${{ needs.prepare-release.outputs.version }}.tar.gz > neo-cpp-macos-x64-${{ needs.prepare-release.outputs.version }}.tar.gz.sha256

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          files: |
            neo-cpp-macos-x64-${{ needs.prepare-release.outputs.version }}.tar.gz
            neo-cpp-macos-x64-${{ needs.prepare-release.outputs.version }}.tar.gz.sha256

  build-windows:
    name: Build Windows Binary
    needs: prepare-release
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Setup build environment
        shell: powershell
        run: |
          # Install vcpkg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg integrate install
          
          # Install minimal dependencies
          C:\vcpkg\vcpkg install --triplet x64-windows `
            openssl boost-system boost-filesystem boost-thread boost-program-options

      - name: Build project
        shell: powershell
        run: |
          cmake -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DNEO_BUILD_TESTS=OFF `
            -DNEO_BUILD_EXAMPLES=OFF
          cmake --build build --config Release --parallel

      - name: Package binaries
        shell: bash
        run: |
          # Create package directory
          mkdir -p neo-cpp-windows-x64/bin
          mkdir -p neo-cpp-windows-x64/config
          
          # Find and copy executables
          find build -name "*.exe" -exec cp {} neo-cpp-windows-x64/bin/ \; 2>/dev/null || true
          
          # Copy configuration files
          cp -r config/* neo-cpp-windows-x64/config/ 2>/dev/null || true
          
          # Copy required DLLs from vcpkg
          cp C:/vcpkg/installed/x64-windows/bin/*.dll neo-cpp-windows-x64/bin/ 2>/dev/null || true
          
          # Create README
          cat > neo-cpp-windows-x64/README.md << 'EOF'
          # Neo C++ for Windows x64
          
          Version: ${{ needs.prepare-release.outputs.version }}
          Platform: Windows 10/11 x64
          
          ## Quick Start
          Double-click start.bat or run:
          ```cmd
          bin\neo-node.exe --config config\testnet.json
          bin\neo-cli.exe --help
          ```
          
          ## Directory Structure
          - bin\ - Executable files and DLLs
          - config\ - Configuration files
          EOF
          
          # Create batch startup script
          cat > neo-cpp-windows-x64/start.bat << 'EOF'
          @echo off
          cd /d "%~dp0"
          bin\neo-node.exe --config config\testnet.json %*
          pause
          EOF
          
          # Create PowerShell startup script
          cat > neo-cpp-windows-x64/start.ps1 << 'EOF'
          $scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
          Set-Location $scriptPath
          & "$scriptPath\bin\neo-node.exe" --config "$scriptPath\config\testnet.json" $args
          EOF
          
          # Create ZIP archive
          powershell Compress-Archive -Path neo-cpp-windows-x64 -DestinationPath neo-cpp-windows-x64-${{ needs.prepare-release.outputs.version }}.zip
          
          # Generate checksum
          powershell "(Get-FileHash neo-cpp-windows-x64-${{ needs.prepare-release.outputs.version }}.zip -Algorithm SHA256).Hash.ToLower() + '  neo-cpp-windows-x64-${{ needs.prepare-release.outputs.version }}.zip'" > neo-cpp-windows-x64-${{ needs.prepare-release.outputs.version }}.zip.sha256

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          files: |
            neo-cpp-windows-x64-${{ needs.prepare-release.outputs.version }}.zip
            neo-cpp-windows-x64-${{ needs.prepare-release.outputs.version }}.zip.sha256

  build-docker:
    name: Build Docker Image
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simplified
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/neo-cpp:${{ needs.prepare-release.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/neo-cpp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  finalize-release:
    name: Finalize Release
    needs: [prepare-release, build-linux, build-macos, build-windows, build-docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update release status
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Create status report
          cat > RELEASE_STATUS.md << 'EOF'
          # Release ${{ needs.prepare-release.outputs.version }} Status
          
          ## Build Results
          - Linux: ${{ needs.build-linux.result }}
          - macOS: ${{ needs.build-macos.result }}
          - Windows: ${{ needs.build-windows.result }}
          - Docker: ${{ needs.build-docker.result }}
          
          ## Docker Images
          ```bash
          docker pull ghcr.io/${{ github.repository_owner }}/neo-cpp:${{ needs.prepare-release.outputs.version }}
          ```
          
          ## Downloads
          See the release page for binary downloads:
          https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}
          
          ---
          *Released automatically from branch: ${{ github.ref_name }}*
          *Build date: $(date)*
          EOF
          
          # Update release with final status
          gh release edit "$VERSION" --notes-file RELEASE_STATUS.md || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}