name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libboost-all-dev \
          libssl-dev

    - name: Build
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DNEO_BUILD_TESTS=OFF
        cmake --build build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'neo-cpp'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t neo-cpp:scanning .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'neo-cpp:scanning'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libboost-all-dev \
          libssl-dev \
          gcovr

    - name: Configure CMake
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DNEO_BUILD_TESTS=ON \
          -DNEO_ENABLE_COVERAGE=ON

    - name: Build
      run: cmake --build build

    - name: Run tests with coverage
      run: |
        cd build
        ctest --output-on-failure
        cd ..
        gcovr --sonarqube coverage.xml -r .

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check licenses
      uses: fossa-contrib/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        
    - name: Run license scanner
      run: |
        pip install licensecheck
        licensecheck --zero --ignore-packages neo-cpp

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}