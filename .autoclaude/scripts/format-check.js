#!/usr/bin/env node
/**
 * Format Check Script
 * Verifies that code is properly formatted
 * Auto-generated by AutoClaude
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function check() {
    const errors = [];
    const warnings = [];
    
    try {
        const projectRoot = process.cwd();
        let formatCheckExecuted = false;
        
        // Check for Node.js project with prettier
        if (fs.existsSync(path.join(projectRoot, 'package.json'))) {
            const packageJson = JSON.parse(fs.readFileSync(path.join(projectRoot, 'package.json'), 'utf8'));
            
            // Check for prettier
            const hasPrettier = (packageJson.devDependencies && packageJson.devDependencies.prettier) ||
                              (packageJson.dependencies && packageJson.dependencies.prettier) ||
                              fs.existsSync(path.join(projectRoot, '.prettierrc')) ||
                              fs.existsSync(path.join(projectRoot, '.prettierrc.json')) ||
                              fs.existsSync(path.join(projectRoot, '.prettierrc.js'));
            
            if (hasPrettier) {
                console.error('Running prettier check...');
                try {
                    execSync('npx prettier --check .', { encoding: 'utf8', stdio: 'pipe' });
                    formatCheckExecuted = true;
                } catch (error) {
                    errors.push('Code formatting issues found. Run: npx prettier --write .');
                    formatCheckExecuted = true;
                }
            }
            
            // Check for ESLint
            const hasEslint = (packageJson.devDependencies && packageJson.devDependencies.eslint) ||
                            (packageJson.dependencies && packageJson.dependencies.eslint) ||
                            fs.existsSync(path.join(projectRoot, '.eslintrc')) ||
                            fs.existsSync(path.join(projectRoot, '.eslintrc.json')) ||
                            fs.existsSync(path.join(projectRoot, '.eslintrc.js'));
            
            if (hasEslint && !formatCheckExecuted) {
                console.error('Running eslint check...');
                try {
                    execSync('npx eslint .', { encoding: 'utf8', stdio: 'pipe' });
                    formatCheckExecuted = true;
                } catch (error) {
                    errors.push('Linting issues found. Run: npx eslint --fix .');
                    formatCheckExecuted = true;
                }
            }
        }
        
        // Check for Go project
        if (!formatCheckExecuted && (fs.existsSync(path.join(projectRoot, 'go.mod')) || 
                                    fs.existsSync(path.join(projectRoot, 'main.go')))) {
            console.error('Running gofmt check...');
            try {
                const unformatted = execSync('gofmt -l .', { encoding: 'utf8' }).trim();
                if (unformatted) {
                    errors.push(`Go files need formatting: ${unformatted.split('\n').join(', ')}`);
                }
                formatCheckExecuted = true;
            } catch (error) {
                warnings.push('gofmt check failed');
            }
        }
        
        // Check for Rust project
        if (!formatCheckExecuted && fs.existsSync(path.join(projectRoot, 'Cargo.toml'))) {
            console.error('Running rustfmt check...');
            try {
                execSync('cargo fmt -- --check', { encoding: 'utf8', stdio: 'pipe' });
                formatCheckExecuted = true;
            } catch (error) {
                errors.push('Rust formatting issues found. Run: cargo fmt');
                formatCheckExecuted = true;
            }
        }
        
        // Check for Python project
        if (!formatCheckExecuted && (fs.existsSync(path.join(projectRoot, 'setup.py')) || 
                                    fs.existsSync(path.join(projectRoot, 'pyproject.toml')) ||
                                    fs.existsSync(path.join(projectRoot, 'requirements.txt')))) {
            // Try black
            try {
                console.error('Running black check...');
                execSync('black --check .', { encoding: 'utf8', stdio: 'pipe' });
                formatCheckExecuted = true;
            } catch (error) {
                if (error.message.includes('would reformat')) {
                    errors.push('Python formatting issues found. Run: black .');
                    formatCheckExecuted = true;
                } else {
                    // Black not installed, try autopep8
                    try {
                        console.error('Running autopep8 check...');
                        const result = execSync('autopep8 --diff -r .', { encoding: 'utf8' });
                        if (result.trim()) {
                            errors.push('Python formatting issues found. Run: autopep8 -i -r .');
                        }
                        formatCheckExecuted = true;
                    } catch (error2) {
                        warnings.push('No Python formatter found (black or autopep8)');
                    }
                }
            }
        }
        
        if (!formatCheckExecuted) {
            warnings.push('No formatting tools found. Supported: prettier, eslint, gofmt, rustfmt, black, autopep8');
        }
        
    } catch (error) {
        errors.push(`Format check failed: ${error.message}`);
    }
    
    // Output results
    console.log(JSON.stringify({
        passed: errors.length === 0,
        errors: errors,
        warnings: warnings
    }, null, 2));
}

// Run the check
check().catch(error => {
    console.error(`Unexpected error during format check: ${error.message}`);
    console.log(JSON.stringify({
        passed: false,
        errors: [`Unexpected error: ${error.message}`]
    }, null, 2));
    process.exit(1);
});