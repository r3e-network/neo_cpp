#!/usr/bin/env node
/**
 * Build Check Script
 * Verifies that the project builds successfully
 * Auto-generated by AutoClaude
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function check() {
    const errors = [];
    const warnings = [];
    
    try {
        const projectRoot = process.cwd();
        let buildExecuted = false;
        
        // Check for Node.js project
        if (fs.existsSync(path.join(projectRoot, 'package.json'))) {
            const packageJson = JSON.parse(fs.readFileSync(path.join(projectRoot, 'package.json'), 'utf8'));
            
            // Check for build script
            if (packageJson.scripts && packageJson.scripts.build) {
                console.error('Running npm build...');
                try {
                    execSync('npm run build', { encoding: 'utf8', stdio: 'pipe' });
                    buildExecuted = true;
                } catch (error) {
                    errors.push(`Build failed: ${error.message}`);
                    buildExecuted = true;
                }
            } else if (packageJson.scripts && packageJson.scripts.compile) {
                console.error('Running npm compile...');
                try {
                    execSync('npm run compile', { encoding: 'utf8', stdio: 'pipe' });
                    buildExecuted = true;
                } catch (error) {
                    errors.push(`Compile failed: ${error.message}`);
                    buildExecuted = true;
                }
            } else {
                warnings.push('No build or compile script found in package.json');
            }
        }
        
        // Check for Go project
        if (!buildExecuted && (fs.existsSync(path.join(projectRoot, 'go.mod')) || 
                               fs.existsSync(path.join(projectRoot, 'main.go')))) {
            console.error('Running go build...');
            try {
                execSync('go build ./...', { encoding: 'utf8' });
                buildExecuted = true;
            } catch (error) {
                errors.push(`Go build failed: ${error.message}`);
                buildExecuted = true;
            }
        }
        
        // Check for Rust project
        if (!buildExecuted && fs.existsSync(path.join(projectRoot, 'Cargo.toml'))) {
            console.error('Running cargo build...');
            try {
                execSync('cargo build', { encoding: 'utf8' });
                buildExecuted = true;
            } catch (error) {
                errors.push(`Cargo build failed: ${error.message}`);
                buildExecuted = true;
            }
        }
        
        // Check for .NET/C# project
        if (!buildExecuted && (fs.existsSync(path.join(projectRoot, '*.csproj')) || 
                               fs.existsSync(path.join(projectRoot, '*.sln')))) {
            console.error('Running dotnet build...');
            try {
                execSync('dotnet build', { encoding: 'utf8' });
                buildExecuted = true;
            } catch (error) {
                errors.push(`Dotnet build failed: ${error.message}`);
                buildExecuted = true;
            }
        }
        
        // Check for Java project (Maven)
        if (!buildExecuted && fs.existsSync(path.join(projectRoot, 'pom.xml'))) {
            console.error('Running maven build...');
            try {
                execSync('mvn compile', { encoding: 'utf8' });
                buildExecuted = true;
            } catch (error) {
                errors.push(`Maven build failed: ${error.message}`);
                buildExecuted = true;
            }
        }
        
        // Check for Java project (Gradle)
        if (!buildExecuted && (fs.existsSync(path.join(projectRoot, 'build.gradle')) || 
                               fs.existsSync(path.join(projectRoot, 'build.gradle.kts')))) {
            console.error('Running gradle build...');
            try {
                execSync('./gradlew build', { encoding: 'utf8' });
                buildExecuted = true;
            } catch (error) {
                errors.push(`Gradle build failed: ${error.message}`);
                buildExecuted = true;
            }
        }
        
        if (!buildExecuted) {
            warnings.push('No recognized build system found. Supported: npm, go, cargo, dotnet, maven, gradle');
        }
        
    } catch (error) {
        errors.push(`Build check failed: ${error.message}`);
    }
    
    // Output results
    console.log(JSON.stringify({
        passed: errors.length === 0,
        errors: errors,
        warnings: warnings
    }, null, 2));
}

// Run the check
check().catch(error => {
    console.error(`Unexpected error during build check: ${error.message}`);
    console.log(JSON.stringify({
        passed: false,
        errors: [`Unexpected error: ${error.message}`]
    }, null, 2));
    process.exit(1);
});