digraph "neo::plugins::StateServicePlugin::CalculateStateRoot"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="neo::plugins::StateService\lPlugin::CalculateStateRoot",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge12_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="neo::cryptography::\lMerkleTree::ComputeRoot",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1cryptography_1_1_merkle_tree.html#a7ff59d2461b31524567790673ba5e7cc",tooltip="Computes the Merkle root of the specified hashes."];
  Node2 -> Node3 [id="edge13_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="neo::cryptography::\lMerkleTree::ComputeParent",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1cryptography_1_1_merkle_tree.html#a3c921ec593629214541ff6d5a6654f44",tooltip="Computes the parent hash of the specified left and right hashes."];
  Node3 -> Node4 [id="edge14_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="neo::io::ByteVector\l::Data",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_vector.html#a971af50d2778c4435c924cf4b839e8a1",tooltip="Gets a pointer to the data."];
  Node3 -> Node5 [id="edge15_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="neo::io::ByteVector::end",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_vector.html#a6b53dac8823a4dd0b729471dd7855d61",tooltip="Gets an iterator to the end of the ByteVector."];
  Node3 -> Node6 [id="edge16_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="neo::io::UInt256::GetData",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_u_int256.html#acfbaffdd04333184ae240d86014d7923",tooltip="Gets the raw data."];
  Node3 -> Node7 [id="edge17_Node000003_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="neo::cryptography::\lHash::Hash256",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1cryptography_1_1_hash.html#a1f27587bba8d21efdec839f2679e1a90",tooltip="Computes Hash256 (double SHA256)."];
  Node7 -> Node8 [id="edge18_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="neo::io::ByteSpan::Data",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_span.html#a0285a19eb5cd212ecd1079e0bc5e494c",tooltip="Gets a pointer to the data."];
  Node7 -> Node9 [id="edge19_Node000007_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="neo::io::ByteSpan::Size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_span.html#a4a869430800a37dcbeefac6f36468fcb",tooltip="Gets the size of the ByteSpan."];
  Node3 -> Node10 [id="edge20_Node000003_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="neo::io::ByteVector\l::insert",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_vector.html#a2d7a8711fbe8b4351fd18b7a45314de5",tooltip="Inserts data at the specified position."];
  Node10 -> Node11 [id="edge21_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="neo::io::ByteVector\l::size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_vector.html#aa810a2a94af643c2ec1e2400da53d3d7",tooltip="Gets the size of the ByteVector (STL compatibility)."];
  Node3 -> Node12 [id="edge22_Node000003_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="neo::io::ByteVector\l::Size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classneo_1_1io_1_1_byte_vector.html#ac0d1a1751d25fde82c44ba55d9d68e24",tooltip="Gets the size of the ByteVector."];
}
